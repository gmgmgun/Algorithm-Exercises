"""
-------------------------------------------
[문제 해석]
N을 입력 받아서 2 x N 크기를 1 x 2, 2 x 1 로 채우는 경우의 수

[접근]
1. 큰 부분(2 x N) 을 작은 부분(1 x 2, 2 x 1)으로 채우는 문제 -> DP
2. DP로 풀이
    - 점화식을 구한다
    - 2 x 1 을 채우는 경우의 수 = 1
    - 2 x 2 를 채우는 경우의 수 = 2
    - 2 x 3 를 채우는 경우의 수 = 3
    - 2 x 4 를 채우는 경우의 수 = 5
    ...
    - 2 x i 를 채우는 경우의 수는?
    dp[i] = dp[i -1] + dp[i - 2]


[카테고리]
동적 계획법(DP)
-------------------------------------------
"""

import sys

N = int(sys.stdin.readline())


def tile_squares(n):
    mod = 10007  
    """
    나머지 연산에 10007를 사용하는 이유
    - 오버플로우 이슈를 회피하기 위해 정수 범위를 제한
    - 10007은 소수이기 때문에 연산 결과가 보다 균등하게 분포됨
    """
    
    # 1, 2 입력 시 점화식을 타지 않고 얼리 리턴
    if n == 1:
        return 1
    elif n == 2:
        return 2
    
    
    dp = [0] * (n + 1)  # 점화식의 결과가 들어갈 공간
    dp[1] = 1
    dp[2] = 2

    for i in range(3, n + 1):  # 1, 2는 구해놓음
        dp[i] = dp[i-1] + dp[i-2]  # 점화식

    return dp[n] % mod


print(tile_squares(N))