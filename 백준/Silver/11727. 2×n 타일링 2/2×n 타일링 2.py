"""
-------------------------------------------
[시간]

[문제 해석]
2 x n 크기의 직사각형이 주어졌을 때,
1 x 2, 2 x 1, 2 x 2 타일로 채우는 방법의 수를 구해라

[접근]
1. 전체를 부분 여러 개로 채우기 -> DP로 풀기
2. 점화식 구하기
    dp[n] = 2xN 직사각형을 채우는 방법의 수
    - 끝이 세로 타일일 경우
        2x(N-1)만큼 남음
        그러므로 남은 경우의 수는 dp[n-1]
    - 끝이 가로 타일일 경우
        2x(N-2)만큼 남음
        그러므로 남은 경우의 수는 dp[n-2]
    - 네모 타일 1개 배치
        2x(N-2)만큼 남음
        그러므로 남은 경우의 수는 dp[n-2]

    결과적으로 dp[n] = dp[n-1] + (dp[n-2] * 2)
3. 반복문 돌리면서 점화식 수행
4. 점화식 결과를 저장할 때, 배열 대신 변수를 사용해 공간 복잡도 최적화

[카테고리]
동적 계획법(DP)
-------------------------------------------
"""

import sys

N = int(sys.stdin.readline())


def tile_squares(n):
    mod = 10007
    
    if n == 1:
        return 1
    if n == 2:
        return 3

    prev2, prev1, = 1, 3

    for i in range(3, n + 1):
        cur = (prev1 + (prev2 * 2)) % mod
        prev2 = prev1
        prev1 = cur

    return prev1


print(tile_squares(N))
